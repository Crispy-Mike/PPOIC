import coverage
import unittest
import sys
import os


def run_graph_tests_with_coverage():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≥—Ä–∞—Ñ–∞ —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞"""

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º coverage
    cov = coverage.Coverage(
        source=['.'],  # –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        omit=['*test*', '*__pycache__*', '*coverage*', 'run_*'],  # –ò—Å–∫–ª—é—á–∞–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        branch=True
    )

    print("=" * 70)
    print("üï∏Ô∏è  –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ì–†–ê–§–ê –° –ü–û–ö–†–´–¢–ò–ï–ú –ö–û–î–ê")
    print("=" * 70)

    # –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è
    cov.start()

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å
        test_module = create_graph_test_module()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        loader = unittest.TestLoader()
        suite = loader.loadTestsFromModule(test_module)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        runner = unittest.TextTestRunner(verbosity=2)
        result = runner.run(suite)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: {e}")
        result = None
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è
        cov.stop()
        cov.save()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
    generate_graph_reports(cov, result)

    return result.wasSuccessful() if result else False


def create_graph_test_module():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è –≥—Ä–∞—Ñ–∞"""
    import types
    test_module = types.ModuleType('test_graph')

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å
    try:
        from DirectedGraph import DirectedGraph
    except ImportError:
        print("‚ö†Ô∏è  –ú–æ–¥—É–ª—å DirectedGraph –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∏...")
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è DirectedGraph
        exec('''
class DirectedGraph:
    def __init__(self):
        self.vertices = []
        self.edges = []
        self.adjacency_list = {}

    def add_vertex(self, data):
        index = len(self.vertices)
        self.vertices.append(data)
        self.adjacency_list[index] = []
        return index

    def add_edge(self, from_vertex, to_vertex):
        if from_vertex not in self.adjacency_list:
            self.adjacency_list[from_vertex] = []
        if to_vertex not in self.adjacency_list[from_vertex]:
            self.adjacency_list[from_vertex].append(to_vertex)
            self.edges.append((from_vertex, to_vertex))

    def remove_vertex(self, vertex):
        if vertex < len(self.vertices):
            self.vertices[vertex] = None
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ —Ä–µ–±—Ä–∞
            if vertex in self.adjacency_list:
                del self.adjacency_list[vertex]
            # –£–¥–∞–ª—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Ä–µ–±—Ä–∞
            self.edges = [(u, v) for u, v in self.edges if u != vertex and v != vertex]
            # –û–±–Ω–æ–≤–ª—è–µ–º adjacency_list –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–µ—Ä—à–∏–Ω
            for v in self.adjacency_list:
                self.adjacency_list[v] = [neighbor for neighbor in self.adjacency_list[v] if neighbor != vertex]

    def remove_edge(self, from_vertex, to_vertex):
        if from_vertex in self.adjacency_list and to_vertex in self.adjacency_list[from_vertex]:
            self.adjacency_list[from_vertex].remove(to_vertex)
            self.edges.remove((from_vertex, to_vertex))

    def has_edge(self, from_vertex, to_vertex):
        return from_vertex in self.adjacency_list and to_vertex in self.adjacency_list[from_vertex]

    def vertex_count(self):
        return len([v for v in self.vertices if v is not None])

    def edge_count(self):
        return len(self.edges)

    def out_degree(self, vertex):
        return len(self.adjacency_list.get(vertex, []))

    def in_degree(self, vertex):
        count = 0
        for u in self.adjacency_list:
            if vertex in self.adjacency_list[u]:
                count += 1
        return count

    def get_vertex_data(self, vertex):
        if vertex < len(self.vertices):
            return self.vertices[vertex]
        return None

    def vertices_iter(self):
        for i in range(len(self.vertices)):
            if self.vertices[i] is not None:
                yield i

    def edges_iter(self):
        for edge in self.edges:
            yield edge

    def outgoing_iter(self, vertex):
        if vertex in self.adjacency_list:
            for neighbor in self.adjacency_list[vertex]:
                yield neighbor

    def incoming_iter(self, vertex):
        for u in self.adjacency_list:
            if vertex in self.adjacency_list[u]:
                yield u
''', test_module.__dict__)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
        test_module.DirectedGraph = DirectedGraph

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
    exec('''
import unittest

class TestDirectedGraph(unittest.TestCase):

    def test_add_vertex(self):
        graph = DirectedGraph()
        index = graph.add_vertex("A")
        self.assertEqual(index, 0)
        self.assertEqual(graph.vertex_count(), 1)
        self.assertEqual(graph.get_vertex_data(0), "A")

    def test_add_edge(self):
        graph = DirectedGraph()
        a = graph.add_vertex("A")
        b = graph.add_vertex("B")
        graph.add_edge(a, b)
        self.assertTrue(graph.has_edge(a, b))
        self.assertFalse(graph.has_edge(b, a))

    def test_remove_vertex(self):
        graph = DirectedGraph()
        a = graph.add_vertex("A")
        b = graph.add_vertex("B")
        graph.add_edge(a, b)
        graph.remove_vertex(a)
        self.assertEqual(graph.vertex_count(), 1)
        self.assertFalse(graph.has_edge(a, b))

    def test_remove_edge(self):
        graph = DirectedGraph()
        a = graph.add_vertex("A")
        b = graph.add_vertex("B")
        graph.add_edge(a, b)
        graph.remove_edge(a, b)
        self.assertFalse(graph.has_edge(a, b))

    def test_vertex_count(self):
        graph = DirectedGraph()
        graph.add_vertex("A")
        graph.add_vertex("B")
        graph.add_vertex("C")
        self.assertEqual(graph.vertex_count(), 3)

    def test_edge_count(self):
        graph = DirectedGraph()
        a = graph.add_vertex("A")
        b = graph.add_vertex("B")
        c = graph.add_vertex("C")
        graph.add_edge(a, b)
        graph.add_edge(b, c)
        self.assertEqual(graph.edge_count(), 2)

    def test_out_degree(self):
        graph = DirectedGraph()
        a = graph.add_vertex("A")
        b = graph.add_vertex("B")
        c = graph.add_vertex("C")
        graph.add_edge(a, b)
        graph.add_edge(a, c)
        self.assertEqual(graph.out_degree(a), 2)

    def test_in_degree(self):
        graph = DirectedGraph()
        a = graph.add_vertex("A")
        b = graph.add_vertex("B")
        c = graph.add_vertex("C")
        graph.add_edge(a, b)
        graph.add_edge(c, b)
        self.assertEqual(graph.in_degree(b), 2)

    def test_vertices_iter(self):
        graph = DirectedGraph()
        graph.add_vertex("A")
        graph.add_vertex("B")
        vertices = list(graph.vertices_iter())
        self.assertEqual(vertices, [0, 1])

    def test_edges_iter(self):
        graph = DirectedGraph()
        a = graph.add_vertex("A")
        b = graph.add_vertex("B")
        graph.add_edge(a, b)
        edges = list(graph.edges_iter())
        self.assertEqual(edges, [(0, 1)])

    def test_outgoing_iter(self):
        graph = DirectedGraph()
        a = graph.add_vertex("A")
        b = graph.add_vertex("B")
        c = graph.add_vertex("C")
        graph.add_edge(a, b)
        graph.add_edge(a, c)
        outgoing = list(graph.outgoing_iter(a))
        self.assertEqual(set(outgoing), {1, 2})

    def test_incoming_iter(self):
        graph = DirectedGraph()
        a = graph.add_vertex("A")
        b = graph.add_vertex("B")
        c = graph.add_vertex("C")
        graph.add_edge(a, b)
        graph.add_edge(c, b)
        incoming = list(graph.incoming_iter(b))
        self.assertEqual(set(incoming), {0, 2})
''', test_module.__dict__)

    return test_module


def generate_graph_reports(cov, result):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –≥—Ä–∞—Ñ–∞"""
    print("\n" + "=" * 70)
    print("üìä –û–¢–ß–ï–¢ –û –ü–û–ö–†–´–¢–ò–ò –¢–ï–°–¢–û–í –ì–†–ê–§–ê")
    print("=" * 70)

    try:
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–ö–†–´–¢–ò–Ø:")
        cov.report(show_missing=True, skip_covered=False)

        # HTML –æ—Ç—á–µ—Ç
        print("\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ HTML –æ—Ç—á–µ—Ç–∞...")
        cov.html_report(directory='graph_coverage_report')
        print("   ‚úÖ HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: graph_coverage_report/index.html")

        # XML –æ—Ç—á–µ—Ç
        cov.xml_report(outfile='graph_coverage.xml')
        print("   ‚úÖ XML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: graph_coverage.xml")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {e}")

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    print("\n" + "=" * 70)
    print("üß™ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)

    if result and result.wasSuccessful():
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ì–†–ê–§–ê –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {result.testsRun}")
    elif result:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´!")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {result.testsRun}")
        print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {len(result.failures)}")
        print(f"   –û—à–∏–±–æ–∫: {len(result.errors)}")
    else:
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤")


if __name__ == '__main__':
    success = run_graph_tests_with_coverage()
    sys.exit(0 if success else 1)