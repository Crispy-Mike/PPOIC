import coverage
import unittest
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../')


def run_tests_with_coverage():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞"""

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º coverage
    cov = coverage.Coverage(
        source=['Classes'],  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–ø–∫—É —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º
        omit=['*test*', '*__pycache__*'],  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç—ã –∏ –∫—ç—à
        branch=True  # –í–∫–ª—é—á–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è –≤–µ—Ç–≤–µ–π
    )

    # –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è
    cov.start()

    print("=" * 70)
    print("–ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –° –ò–ó–ú–ï–†–ï–ù–ò–ï–ú –ü–û–ö–†–´–¢–ò–Ø –ö–û–î–ê")
    print("=" * 70)

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        loader = unittest.TestLoader()
        suite = loader.loadTestsFromName('test_bank_system')

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        runner = unittest.TextTestRunner(verbosity=2)
        result = runner.run(suite)

    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è
        cov.stop()
        cov.save()

    print("\n" + "=" * 70)
    print("–û–¢–ß–ï–¢ –û –ü–û–ö–†–´–¢–ò–ò –¢–ï–°–¢–ê–ú–ò")
    print("=" * 70)

    # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
    cov.report(show_missing=True, skip_covered=False)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç
    print("\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞...")
    cov.html_report(
        directory='coverage_report',
        title='–û—Ç—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏ - –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞'
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º XML –æ—Ç—á–µ—Ç (–¥–ª—è CI/CD)
    cov.xml_report(outfile='coverage.xml')

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–æ —Ñ–∞–π–ª–∞–º
    print("\n" + "=" * 70)
    print("–î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–ö–†–´–¢–ò–ò")
    print("=" * 70)

    analyzed_files = cov.get_data().measured_files()
    for file_path in analyzed_files:
        file_name = os.path.basename(file_path)
        if 'Classes' in file_path:
            analysis = cov.analysis(file_path)
            covered_lines = len(analysis[1])
            missing_lines = len(analysis[2])
            total_lines = covered_lines + missing_lines
            coverage_percent = (covered_lines / total_lines * 100) if total_lines > 0 else 0

            print(f"\nüìä {file_name}:")
            print(f"   –ü–æ–∫—Ä—ã—Ç–æ: {covered_lines}/{total_lines} —Å—Ç—Ä–æ–∫ ({coverage_percent:.1f}%)")
            if missing_lines > 0:
                print(f"   –ù–µ–ø–æ–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏: {missing_lines}")

    # –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n" + "=" * 70)
    print("–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 70)

    total_stats = cov.report(show_missing=False)
    coverage_percentage = cov.html_report(directory='coverage_report')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–æ–≤
    if result.wasSuccessful():
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´!")
        print(f"   –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {result.testsRun - len(result.failures) - len(result.errors)}/{result.testsRun}")
        if result.failures:
            print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(result.failures)}")
        if result.errors:
            print(f"   –û—à–∏–±–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(result.errors)}")

    print(f"\nüìÅ HTML –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–ø–∫–µ: coverage_report/")
    print(f"üìä XML –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª–µ: coverage.xml")
    print("=" * 70)

    return result.wasSuccessful()


if __name__ == '__main__':
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ –≤ —Ñ–∞–π–ª
    test_code = '''
import unittest
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../')

from Classes.Bank import Bank
from Classes.BankAccount import BankAccount, InsufficientFundsError, InvalidTransactionError
from Classes.BankStatement import BankStatement
from Classes.Branch import Branch
from Classes.BranchManager import BranchManager
from Classes.AuthService import AuthService, AuthenticationError
from Classes.BiometricScanner import BiometricScanner
from Classes.AuditReport import AuditReport


class TestBank(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ Bank"""

    def test_init(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–Ω–∫–∞"""
        bank = Bank("–°–±–µ—Ä–±–∞–Ω–∫")
        self.assertEqual(bank.name_bank, "–°–±–µ—Ä–±–∞–Ω–∫")
        self.assertEqual(bank.branches, [])
        self.assertEqual(bank.currency_rates, {})

    def test_add_currency_rate(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç"""
        bank = Bank("–°–±–µ—Ä–±–∞–Ω–∫")

        # –°–æ–∑–¥–∞–µ–º mock-–æ–±—ä–µ–∫—Ç—ã –¥–ª—è –≤–∞–ª—é—Ç
        class MockCurrency:
            def __init__(self, code):
                self.code = code

        from_currency = MockCurrency('USD')
        to_currency = MockCurrency('RUB')

        bank.add_currency_rate(from_currency, to_currency, 75.5)
        self.assertEqual(bank.currency_rates[('USD', 'RUB')], 75.5)

    def test_get_currency_rate(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç"""
        bank = Bank("–°–±–µ—Ä–±–∞–Ω–∫")

        class MockCurrency:
            def __init__(self, code):
                self.code = code

        from_currency = MockCurrency('USD')
        to_currency = MockCurrency('RUB')

        bank.add_currency_rate(from_currency, to_currency, 75.5)
        rate = bank.get_currency_rate(from_currency, to_currency)
        self.assertEqual(rate, 75.5)

        # –¢–µ—Å—Ç –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫—É—Ä—Å–∞
        eur_currency = MockCurrency('EUR')
        non_existent_rate = bank.get_currency_rate(from_currency, eur_currency)
        self.assertIsNone(non_existent_rate)


class TestBankAccount(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ BankAccount"""

    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""

        class MockCurrency:
            def __init__(self, code):
                self.code = code

        self.currency = MockCurrency('RUB')

    def test_init(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞"""
        account = BankAccount("1234567890", "–¥–µ–±–µ—Ç–æ–≤—ã–π", self.currency, 1000.0)

        self.assertEqual(account.account_number, "1234567890")
        self.assertEqual(account.account_type, "–¥–µ–±–µ—Ç–æ–≤—ã–π")
        self.assertEqual(account.currency.code, "RUB")
        self.assertEqual(account.balance, 1000.0)
        self.assertIsNone(account.owner)

    def test_deposit_positive_amount(self):
        """–¢–µ—Å—Ç –≤–Ω–µ—Å–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç"""
        account = BankAccount("1234567890", "–¥–µ–±–µ—Ç–æ–≤—ã–π", self.currency, 1000.0)

        new_balance = account.deposit(500.0)
        self.assertEqual(new_balance, 1500.0)
        self.assertEqual(account.balance, 1500.0)

    def test_deposit_negative_amount(self):
        """–¢–µ—Å—Ç –≤–Ω–µ—Å–µ–Ω–∏—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º—ã"""
        account = BankAccount("1234567890", "–¥–µ–±–µ—Ç–æ–≤—ã–π", self.currency, 1000.0)

        with self.assertRaises(InvalidTransactionError):
            account.deposit(-100.0)

    def test_withdraw_sufficient_funds(self):
        """–¢–µ—Å—Ç —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ"""
        account = BankAccount("1234567890", "–¥–µ–±–µ—Ç–æ–≤—ã–π", self.currency, 1000.0)

        new_balance = account.withdraw(300.0)
        self.assertEqual(new_balance, 700.0)
        self.assertEqual(account.balance, 700.0)

    def test_withdraw_insufficient_funds(self):
        """–¢–µ—Å—Ç —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ"""
        account = BankAccount("1234567890", "–¥–µ–±–µ—Ç–æ–≤—ã–π", self.currency, 1000.0)

        with self.assertRaises(InsufficientFundsError):
            account.withdraw(1500.0)

    def test_withdraw_negative_amount(self):
        """–¢–µ—Å—Ç —Å–Ω—è—Ç–∏—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º—ã"""
        account = BankAccount("1234567890", "–¥–µ–±–µ—Ç–æ–≤—ã–π", self.currency, 1000.0)

        with self.assertRaises(InvalidTransactionError):
            account.withdraw(-100.0)


class TestBankStatement(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ BankStatement"""

    def test_init(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≤—ã–ø–∏—Å–∫–∏"""

        class MockAccount:
            def __init__(self, account_number):
                self.account_number = account_number

        account = MockAccount('1234567890')
        transactions = []

        statement = BankStatement("STMT001", account, "2024-01-01", "2024-01-31", transactions)

        self.assertEqual(statement.statement_id, "STMT001")
        self.assertEqual(statement.account.account_number, "1234567890")
        self.assertEqual(statement.period_start, "2024-01-01")
        self.assertEqual(statement.period_end, "2024-01-31")
        self.assertEqual(statement.transactions, [])

    def test_generate_statement(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–∏—Å–∫–∏"""

        class MockAccount:
            def __init__(self, account_number):
                self.account_number = account_number

        class MockTransaction:
            def __init__(self, amount):
                self.amount = amount

        account = MockAccount('1234567890')
        transactions = [
            MockTransaction(100.0),
            MockTransaction(-50.0)
        ]

        statement = BankStatement("STMT001", account, "2024-01-01", "2024-01-31", transactions)
        statement.opening_balance = 500.0

        result = statement.generate_statement()
        self.assertEqual(result, "–í—ã–ø–∏—Å–∫–∞ –¥–ª—è —Å—á–µ—Ç–∞ 1234567890")
        self.assertEqual(statement.closing_balance, 550.0)  # 500 + 100 - 50


class TestBranch(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ Branch"""

    def test_init(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª–∏–∞–ª–∞"""
        branch = Branch("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–∏–ª–∏–∞–ª", "—É–ª. –õ–µ–Ω–∏–Ω–∞, 1", "BR001")

        self.assertEqual(branch.name_branch, "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–∏–ª–∏–∞–ª")
        self.assertEqual(branch.address, "—É–ª. –õ–µ–Ω–∏–Ω–∞, 1")
        self.assertEqual(branch.branch_code, "BR001")
        self.assertEqual(branch.customers, [])
        self.assertEqual(branch.employees, [])

    def test_add_atm(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–æ–º–∞—Ç–∞ –≤ —Ñ–∏–ª–∏–∞–ª"""

        class MockATM:
            def __init__(self):
                self.branch = None

        branch = Branch("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–∏–ª–∏–∞–ª", "—É–ª. –õ–µ–Ω–∏–Ω–∞, 1", "BR001")
        atm = MockATM()

        branch.add_atm(atm)
        self.assertIn(atm, branch.atms)
        self.assertEqual(atm.branch, branch)



class TestAuthService(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ AuthService"""

    def test_init(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª—É–∂–±—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        auth_service = AuthService("AUTH001", "active", "high", 3, 300)

        self.assertEqual(auth_service.system_id, "AUTH001")
        self.assertEqual(auth_service.system_type, "authentication")
        self.assertEqual(auth_service.status, "active")
        self.assertEqual(auth_service.security_level, "high")
        self.assertEqual(auth_service.max_attempts, 3)
        self.assertEqual(auth_service.timeout_duration, 300)
        self.assertTrue(auth_service.two_factor_enabled)

    def test_authenticate_user_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        auth_service = AuthService("AUTH001", "active", "high", 3, 300)

        result = auth_service.authenticate_user("user123", "password123")
        self.assertTrue(result)

    def test_authenticate_user_too_many_attempts(self):
        """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ–ø—ã—Ç–æ–∫"""
        auth_service = AuthService("AUTH001", "active", "high", 3, 300)
        auth_service.failed_attempts = 3  # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫

        with self.assertRaises(AuthenticationError):
            auth_service.authenticate_user("user123", "wrong_password")


class TestBiometricScanner(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ BiometricScanner"""

    def test_init(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞"""
        scanner = BiometricScanner("SCAN001", "fingerprint", 99.5, True)

        self.assertEqual(scanner.scanner_id, "SCAN001")
        self.assertEqual(scanner.scanner_type, "fingerprint")
        self.assertEqual(scanner.accuracy, 99.5)
        self.assertTrue(scanner.is_enabled)

    def test_scanner_disabled(self):
        """–¢–µ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞"""
        scanner = BiometricScanner("SCAN002", "retina", 98.0, False)

        self.assertEqual(scanner.scanner_id, "SCAN002")
        self.assertEqual(scanner.scanner_type, "retina")
        self.assertFalse(scanner.is_enabled)


class TestAuditReport(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ AuditReport"""

    def test_init(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏—Ç–æ—Ä—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        data = {"transactions": 1000, "errors": 5}

        class MockAuditor:
            def __init__(self, name):
                self.name = name

        auditor = MockAuditor('–ò–≤–∞–Ω –ê—É–¥–∏—Ç–æ—Ä–æ–≤')

        report = AuditReport("AUDIT001", "2024-01-01", data, auditor)

        self.assertEqual(report.report_id, "AUDIT001")
        self.assertEqual(report.report_type, "audit")
        self.assertEqual(report.generation_date, "2024-01-01")
        self.assertEqual(report.data, data)
        self.assertEqual(report.auditor.name, "–ò–≤–∞–Ω –ê—É–¥–∏—Ç–æ—Ä–æ–≤")
        self.assertEqual(report.findings, [])
        self.assertEqual(report.recommendations, [])

    def test_add_finding(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ö–æ–¥–∫–∏ –∞—É–¥–∏—Ç–∞"""
        data = {"transactions": 1000, "errors": 5}

        class MockAuditor:
            def __init__(self, name):
                self.name = name

        auditor = MockAuditor('–ò–≤–∞–Ω –ê—É–¥–∏—Ç–æ—Ä–æ–≤')

        report = AuditReport("AUDIT001", "2024-01-01", data, auditor)
        report.add_finding("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—á–∞ —Å—Ä–µ–¥—Å—Ç–≤")
        report.add_finding("–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

        self.assertEqual(len(report.findings), 2)
        self.assertIn("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—á–∞ —Å—Ä–µ–¥—Å—Ç–≤", report.findings)
        self.assertIn("–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", report.findings)


if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π suite –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    unittest.main(verbosity=2)
'''

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open('test_bank_system.py', 'w', encoding='utf-8') as f:
        f.write(test_code)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
    success = run_tests_with_coverage()

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        os.remove('test_bank_system.py')
    except:
        pass

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if success else 1)