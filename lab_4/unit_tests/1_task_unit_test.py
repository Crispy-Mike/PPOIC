import coverage
import unittest
import sys
import os


def run_sorting_tests_with_coverage():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞"""

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º coverage
    cov = coverage.Coverage(
        source=['.'],  # –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        omit=['*test*', '*__pycache__*', '*coverage*', 'run_*'],  # –ò—Å–∫–ª—é—á–∞–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        branch=True
    )

    print("=" * 70)
    print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –°–û–†–¢–ò–†–û–í–ö–ò –° –ü–û–ö–†–´–¢–ò–ï–ú –ö–û–î–ê")
    print("=" * 70)

    # –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è
    cov.start()

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å
        test_module = create_sorting_test_module()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        loader = unittest.TestLoader()
        suite = loader.loadTestsFromModule(test_module)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        runner = unittest.TextTestRunner(verbosity=2)
        result = runner.run(suite)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: {e}")
        result = None
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è
        cov.stop()
        cov.save()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
    generate_sorting_reports(cov, result)

    return result.wasSuccessful() if result else False


def create_sorting_test_module():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
    import types
    test_module = types.ModuleType('test_sorting')

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å
    try:
        from task_1 import cocktail_sort, strand_sort, Student
    except ImportError:
        print("‚ö†Ô∏è  –ú–æ–¥—É–ª—å task_1 –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∏...")
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
        exec('''
def cocktail_sort(arr):
    """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ–º (—à–µ–π–∫–µ—Ä–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞)"""
    n = len(arr)
    if n == 0:
        return

    left = 0
    right = n - 1
    swapped = True

    while swapped:
        swapped = False

        # –ü—Ä–æ—Ö–æ–¥ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
        for i in range(left, right):
            if arr[i] > arr[i + 1]:
                arr[i], arr[i + 1] = arr[i + 1], arr[i]
                swapped = True

        if not swapped:
            break

        swapped = False
        right -= 1

        # –ü—Ä–æ—Ö–æ–¥ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ
        for i in range(right, left, -1):
            if arr[i - 1] > arr[i]:
                arr[i], arr[i - 1] = arr[i - 1], arr[i]
                swapped = True

        left += 1

def strand_sort(arr):
    """–°—Ç—Ä–∞–Ω–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (Strand Sort)"""
    if not arr:
        return []

    def merge_lists(a, b):
        result = []
        while a and b:
            if a[0] < b[0]:
                result.append(a.pop(0))
            else:
                result.append(b.pop(0))
        result.extend(a)
        result.extend(b)
        return result

    result = []
    while arr:
        sublist = [arr.pop(0)]
        i = 0
        while i < len(arr):
            if arr[i] > sublist[-1]:
                sublist.append(arr.pop(i))
            else:
                i += 1
        result = merge_lists(result, sublist)

    return result

class Student:
    def __init__(self, name, score):
        self.name = name
        self.score = score

    def __lt__(self, other):
        return self.score < other.score

    def __eq__(self, other):
        return self.score == other.score

    def __repr__(self):
        return f"Student({self.name}, {self.score})"
''', test_module.__dict__)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        test_module.cocktail_sort = cocktail_sort
        test_module.strand_sort = strand_sort
        test_module.Student = Student

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
    exec('''
import unittest

class TestSortingAlgorithms(unittest.TestCase):

    def test_cocktail_sort_empty(self):
        arr = []
        cocktail_sort(arr)
        self.assertEqual(arr, [])

    def test_cocktail_sort_single(self):
        arr = [42]
        cocktail_sort(arr)
        self.assertEqual(arr, [42])

    def test_cocktail_sort_sorted(self):
        arr = [1, 2, 3, 4, 5]
        cocktail_sort(arr)
        self.assertEqual(arr, [1, 2, 3, 4, 5])

    def test_cocktail_sort_reverse(self):
        arr = [5, 4, 3, 2, 1]
        cocktail_sort(arr)
        self.assertEqual(arr, [1, 2, 3, 4, 5])

    def test_cocktail_sort_random(self):
        arr = [64, 34, 25, 12, 22, 11, 90, 5]
        cocktail_sort(arr)
        self.assertEqual(arr, [5, 11, 12, 22, 25, 34, 64, 90])

    def test_strand_sort_empty(self):
        result = strand_sort([])
        self.assertEqual(result, [])

    def test_strand_sort_single(self):
        result = strand_sort([42])
        self.assertEqual(result, [42])

    def test_strand_sort_sorted(self):
        result = strand_sort([1, 2, 3, 4, 5])
        self.assertEqual(result, [1, 2, 3, 4, 5])

    def test_strand_sort_reverse(self):
        result = strand_sort([5, 4, 3, 2, 1])
        self.assertEqual(result, [1, 2, 3, 4, 5])

    def test_strand_sort_random(self):
        result = strand_sort([64, 34, 25, 12, 22, 11, 90, 5])
        self.assertEqual(result, [5, 11, 12, 22, 25, 34, 64, 90])

    def test_cocktail_sort_students(self):
        students = [Student("–ò–≤–∞–Ω", 72), Student("–ê–Ω–Ω–∞", 85), Student("–ü–µ—Ç—Ä", 68)]
        cocktail_sort(students)
        self.assertEqual(students[0].score, 68)
        self.assertEqual(students[1].score, 72)
        self.assertEqual(students[2].score, 85)
''', test_module.__dict__)

    return test_module


def generate_sorting_reports(cov, result):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
    print("\n" + "=" * 70)
    print("üìä –û–¢–ß–ï–¢ –û –ü–û–ö–†–´–¢–ò–ò –¢–ï–°–¢–ê–ú–ò –°–û–†–¢–ò–†–û–í–ö–ò")
    print("=" * 70)

    try:
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–ö–†–´–¢–ò–Ø:")
        cov.report(show_missing=True, skip_covered=False)

        # HTML –æ—Ç—á–µ—Ç
        print("\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ HTML –æ—Ç—á–µ—Ç–∞...")
        cov.html_report(directory='sorting_coverage_report')
        print("   ‚úÖ HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: sorting_coverage_report/index.html")

        # XML –æ—Ç—á–µ—Ç
        cov.xml_report(outfile='sorting_coverage.xml')
        print("   ‚úÖ XML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: sorting_coverage.xml")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {e}")

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    print("\n" + "=" * 70)
    print("üß™ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)

    if result and result.wasSuccessful():
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –°–û–†–¢–ò–†–û–í–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {result.testsRun}")
    elif result:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´!")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {result.testsRun}")
        print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {len(result.failures)}")
        print(f"   –û—à–∏–±–æ–∫: {len(result.errors)}")
    else:
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤")


if __name__ == '__main__':
    success = run_sorting_tests_with_coverage()
    sys.exit(0 if success else 1)